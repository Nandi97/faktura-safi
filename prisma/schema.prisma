// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Menu {
  id           String  @id @default(cuid())
  title        String  @unique
  description  String?
  illustration String
  link         String
  buttonText   String
  listOrder    Int     @unique

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Customer {
  id       String    @id @default(cuid())
  name     String
  email    String
  phone    String
  address  String?
  quotes   Quote[]
  invoices Invoice[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model QuoteStatus {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  quotes Quote[]
}

model Quote {
  id            String  @id @default(cuid())
  quoteNumber   String  @unique
  customerId    String
  taxId         String?
  total         Float
  quoteStatusId String?
  comment       String  @default("Pending Approval")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  tax         Tax?         @relation(fields: [taxId], references: [id]) // Direct relationship
  customer    Customer     @relation(fields: [customerId], references: [id])
  quoteStatus QuoteStatus? @relation(fields: [quoteStatusId], references: [id])

  invoice Invoice[]
  items   QuoteItem[]
}

model Unit {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  quoteItem QuoteItem[]
}

model QuoteItem {
  id       String @id @default(cuid())
  product  String
  unitId   String
  quantity Int
  price    Float
  quoteId  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  quote Quote @relation(fields: [quoteId], references: [id])
  unit  Unit  @relation(fields: [unitId], references: [id])
}

model InvoiceStatus {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  invoice Invoice[]
}

model Invoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  quoteId         String
  customerId      String
  total           Float
  comment         String   @default("unpaid")
  dueDate         DateTime
  taxId           String?
  invoiceStatusId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  tax           Tax?           @relation(fields: [taxId], references: [id]) // Direct relationship
  customer      Customer       @relation(fields: [customerId], references: [id])
  quote         Quote          @relation(fields: [quoteId], references: [id])
  invoiceStatus InvoiceStatus? @relation(fields: [invoiceStatusId], references: [id])

  payment Payment[]
}

model Tax {
  id          String  @id @default(cuid())
  name        String  @unique
  rate        Float // Tax rate as a percentage (e.g., 5 for 5%)
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  quote   Quote[]
  invoice Invoice[]
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  amount    Float
  paidAt    DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
