// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Customer {
  id       String    @id @default(cuid())
  name     String
  email    String
  phone    String
  address  String?
  quotes   Quote[]
  invoices Invoice[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
}

model Quote {
  id         String      @id @default(cuid())
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  items      QuoteItem[]
  total      Float
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  Invoice    Invoice[]
}

model QuoteItem {
  id      String @id @default(cuid())
  quoteId String
  Quote   Quote  @relation(fields: [quoteId], references: [id])
}

model Invoice {
  id         String    @id @default(cuid())
  quoteId    String
  quote      Quote     @relation(fields: [quoteId], references: [id])
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  total      Float
  status     String    @default("unpaid")
  dueDate    DateTime
  createdAt  DateTime  @default(now())
  Payment    Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  amount    Float
  paidAt    DateTime @default(now())
}
